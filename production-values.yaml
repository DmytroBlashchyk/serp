common:
  env:
    - name: APP_ENV
      value: production

##########################################
#               App                      #
##########################################
app:
  image:
    repository: '353300701778.dkr.ecr.us-east-2.amazonaws.com/serpnest'
    tag: 'latest'
    pullPolicy: Always

  labels:
    Application: serpnest
    Component: app
    Environment: production
    Team: serpnest

  podAnnotations:

  container:
    port: 4000
    protocol: TCP

  autoscaling:
    enabled: true
    targetCPUUtilizationPercentage: 75
    desiredReplicaCount: 1
    minReplicas: 1
    maxReplicas: 3

  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  env:
    - name: CONTAINER_ROLE
      value: "app"
    - name: NODE_ENV
      value: "production"
    - name: APP_PORT
      value: "4000"


  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=300
      alb.ingress.kubernetes.io/backend-protocol: HTTP
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-2:353300701778:certificate/3ee0fd18-0277-4169-a325-556e0dc86b47
      alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-Res-2019-08
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}, {"HTTP": 80}]'
      alb.ingress.kubernetes.io/scheme: 'internet-facing'
      external-dns.alpha.kubernetes.io/hostname: api.serpnest.com
      alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
      alb.ingress.kubernetes.io/healthcheck-path: '/'
      alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'

     
    path: '/'
    #pathType: Prefix
    host: 'api.serpnest.com'

  service:
    type: NodePort
    #externalTrafficPolicy: "Cluster"
    port: 80
    protocol: TCP
    targetPort: 4000

    annotations: {}

  # This is too check if the application is ready to servce traffic
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  # https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes
  readinessProbe:
    httpGet:
      path: '/app-health'
      port: 4000
    initialDelaySeconds: 180
    timeoutSeconds: 30
    periodSeconds: 20
    successThreshold: 1
    failureThreshold: 5

  # This is the application health check, if it becomes unhealthy, kubernetes will attempt to spin a new container up.
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  # https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes
  livenessProbe:
    httpGet:
      path: '/app-health'
      port: 4000
    initialDelaySeconds: 100
    timeoutSeconds: 10
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 5

  # Resource limits and Requests for the container.
  # These values are sensitive and we adivse that you start with minimal values .
  resources:
    requests:
      cpu: 1000m
      memory: 1000Mi
    limits:
      cpu: 1250m

  nodeSelector: {}

  tolerations: []

##########################################
#                 Queue                  #
##########################################
queue:
  image:
    repository: '353300701778.dkr.ecr.us-east-2.amazonaws.com/serpnest-queue'
    tag: 'latest'
    pullPolicy: Always

  labels:
    Application: serpnest
    Component: queue
    Environment: production
    Team: serpnest

  podAnnotations:

  container:
    port: 9000
    protocol: TCP

  autoscaling:
    enabled: true
    targetCPUUtilizationPercentage: 75
    desiredReplicaCount: 1
    minReplicas: 1
    maxReplicas: 1

  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  env:
    - name: CONTAINER_ROLE
      value: 'queue'
    - name: APP_PORT
      value: "9000"

 

  service:
    type: NodePort
    targetPort: 80
    protocol: TCP
    port: 9000

    # This is too check if the application is ready to servce traffic
    # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    # https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes
  readinessProbe:
    httpGet:
      path: '/health-check'
      port: 9000
    initialDelaySeconds: 180
    timeoutSeconds: 30
    periodSeconds: 20
    successThreshold: 1
    failureThreshold: 5

    # This is the application health check, if it becomes unhealthy, kubernetes will attempt to spin a new container up.
    # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
    # https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes
  livenessProbe:
    httpGet:
      path: '/health-check'
      port: 9000
    initialDelaySeconds: 100
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 5

    # Resource limits and Requests for the container.
    # These values are sensitive and we adivse that you start with minimal values .
  resources:
    requests:
      cpu: 1000m
      memory: 1250Mi
    limits:
      cpu: 1250m

  nodeSelector: {}

  tolerations: []

##########################################
#               FApp                      #
##########################################
fapp:
  image:
    repository: '353300701778.dkr.ecr.us-east-2.amazonaws.com/serpnest-fastify'
    tag: 'latest'
    pullPolicy: Always

  labels:
    Application: fserpnest
    Component: app
    Environment: production
    Team: serpnest

  podAnnotations:

  container:
    port: 4002
    protocol: TCP

  autoscaling:
    enabled: true
    targetCPUUtilizationPercentage: 75
    desiredReplicaCount: 1
    minReplicas: 1
    maxReplicas: 3

  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  env:
    - name: CONTAINER_ROLE
      value: "app"
    - name: APP_PORT
      value: "4002"


  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/backend-protocol: HTTP
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-2:353300701778:certificate/5debfa07-b071-4c31-9722-6d34a19f27e7
      alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-Res-2019-08
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}, {"HTTP": 80}]'
      alb.ingress.kubernetes.io/scheme: 'internet-facing'
      external-dns.alpha.kubernetes.io/hostname: data.serpnest.com
      alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
      alb.ingress.kubernetes.io/healthcheck-path: '/'
      alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
     
    path: '/'
    host: 'data.serpnest.com'

  service:
    type: NodePort
    port: 80
    protocol: TCP
    targetPort: 4002

    annotations: {}

  # This is too check if the application is ready to servce traffic
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  # https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes
  readinessProbe:
    httpGet:
      path: '/health'
      port: 4002
    initialDelaySeconds: 120
    timeoutSeconds: 20
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 5

  # This is the application health check, if it becomes unhealthy, kubernetes will attempt to spin a new container up.
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  # https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes
  livenessProbe:
    httpGet:
      path: '/health'
      port: 4002
    initialDelaySeconds: 100
    timeoutSeconds: 10
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 5

  # Resource limits and Requests for the container.
  # These values are sensitive and we adivse that you start with minimal values .
  resources:
    requests:
      cpu: 750m
      memory: 1000Mi
    limits:
      cpu: 1

  nodeSelector: {}

  tolerations: []

